# Algorithm 3.3 (Exp Search) 

# Run in Sage v9.2

# Input
    # an odd prime p
    # a pair of integers lambda1 and lambda2
    # lower bound on m1, lower_m1
    # upper bound on m1, upper_m1
#Output
    # List, D, of all discriminants of quadratic number fields corresponding to pairs of triples (m1, y1, lambda1*z1), 
        # (m2, y2, lambda2*z2) satisfying Proposition (2.3) (b) for n=p with lower_m1 <= m1 <= upper_m1 and 2 <= m2 < m1. 


def Exp_Search(p, lambda1, lambda2, lower_m1, upper_m1):
    print("Running Algorithm 3.3/ Exp Search for")
    print("p= "+str(p)+", lambda1 = "+str(lambda1)+", lambda2 = "+str(lambda2)+", lower_m1 = "+str(lower_m1)+", upper_m1 = "+str(upper_m1))
    print("   Status:")
    D = set() 
    for m1 in range(lower_m1, upper_m1 + 1):
        print("     m1 = "+str(m1))
        for m2 in range(2, m1):
         
            
            N = 4*lambda2^2*m1^p - 4*lambda1^2*m2^p
            sqN = sqrt(N)
            for a in divisors(N):
                if a <= sqN:
                    b = N/a
                    if (2*lambda1).divides(a+b) and (2*lambda2).divides(a-b):
                        y = (a+b)/(2*lambda2)
           
                        
                        t = y^2 - 4*m1^p
                        if t < 0:
                            delta = ZZ(t.squarefree_part())
                            
                            if delta % 4 != 1:
                                delta = 4*delta
                            if delta.divides(t):
                                z = ZZ(sqrt(t/delta))
                                c1 = ZZ(gcd(m1, z))
                                c2 = ZZ(gcd(m2, lambda2*z/lambda1))
                                
                                if c1.divides(delta) and c2.divides(delta) and not 4.divides(c1) and not 4.divides(c2):
                                    if m1 < sqrt(-delta/4):
                                        if p == 3:
                                            D.add(delta)
                                        else:
                                            if not m1.divides(m2^((p-1)/2)) and m2^((p-1)/2) < sqrt(-delta/4):
                                                D.add(delta)

   
                                                
           
    print("Done!")
    return(list(D))
