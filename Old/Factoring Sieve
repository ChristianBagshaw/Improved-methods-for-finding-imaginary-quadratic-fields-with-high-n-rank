# Factoring Sieve

def roots(p, roots_bound, lambda1, lambda2):
    roots = {}
    for q in prime_range(2, roots_bound+1):
        Zq = Integers(q) # Zq is the ring of integers modulo q, Z/qZ
        if not q.divides(lambda1):
            lambda1inv = inverse_mod(lambda1, q)
        else:
            continue
        roots[q] =  Zq((lambda2*lambda1inv)^2).nth_root(p, all=True) # computes the roots of x^p - (lambda2/lambda1)^2 = 0 mod q
    return(roots)

def Fac_Sieve(p, m1, prime_bound, lambda1, lambda2, roots):
    factor_array = [[] for m2 in range(0, m1)]
    for q in roots:
        if q < prime_bound:
            for x in roots[q]:
                xm1 = (x*m1)%q
                for m2 in range (xm1, m1, q):
                    factor_array[m2].append(q)
    return(factor_array)
