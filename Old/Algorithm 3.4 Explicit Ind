# Algorithm 3.4 (Explicit Ind) 

# Run in Sage v9.2

# This algorithm has been split into three functions, with descriptions commented above and throughout each. 
# The first function, Explicit_Ind, encompasses Algorithm 3.4 and calls upon the other two.
    
    
    
# We keep in mind that when dealing with ideals in a quadratic number field, it is equivalent to look at binary quadratic forms. 
    # Thus, we work with Sage's BinaryQF package.
    
    
# Memory will quickly become an issue if this code is run verbatim for a large computation, since 
    # a lot of data is being stored in dictionaries. In a large computation, this data 
    # should be stored outside of memory. 


# Input
    # an odd prime p
    # a set of integer pairs {(lambda_i1, lambda_i2). 
    # lower bound on m_1, lower_m1
    # upper bound on m_1, upper_m1
#Output
    # A dictionary D consisting of discriminants, each corresponding to a non-empty set of triples 
        # {(m_i, y_i, (lambda_ij)*z_i)} satisfying Proposition (2.3) (a) for n=p with 
        # lower_m1 <= m_1 <= upper_m1 and 2 <= m_2 < m_1. To each discriminant delta in the dictionary D, 
        # D[delta] is the positive integer k such that the ideal classes corresponding to the triples $
        # {(m_i, y_i, (lambda_ij)z_i)} generate a subgroup of the ideal class group of 
        # Q(sqrt{delta}) isomorphic to (Z/pZ)^k. 
        

from math import sqrt
import itertools
import numpy 
       
    
def Explicit_Ind(p, lambdas, lower_m1, upper_m1):
    print("Running Algorithm 3.3/ Exp Search for")
    print("p= "+str(p)+", lambdas = "+str(lambdas)+", lower_m1 = "+str(lower_m1)+", upper_m1 = "+str(upper_m1))
   
    
    ideals = {}
    
    for (lambda1, lambda2) in lambdas:
        for m1 in range(lower_m1, upper_m1 + 1):

            for m2 in range(2, m1):

                N = 4*lambda2^2*m1^p - 4*lambda1^2*m2^p
                if N < 0:
                    continue 
                sqN = sqrt(N)
                for a in divisors(N):
                    if a <= sqN:
                        b = N/a
                        if (2*lambda2).divides(a+b):

                            y1 = (a+b)/(2*lambda2)

                            ideal_1 = Solution_to_Ideals(p, y1, m1) # carries out lines 10-19 in Algorithm 3.4

                            if ideal_1[0]:
                                delta = ideal_1[1]

                                if delta in ideals:
                                    ideals[delta].append(ideal_1[2])
                                else:
                                    ideals[delta] = [ideal_1[2]]

                        if (2*lambda1).divides(a-b):
                            y2 = (a-b)/(2*lambda1)

                            ideal_2 = Solution_to_Ideals(p, y2, m2) # carries out line 22 in Algorithm 3.4

                            if ideal_2[0]:
                                delta = ideal_2[1]
                                if delta in ideals:
                                    ideals[delta].append(ideal_2[2])
                                else:
                                    ideals[delta] = [ideal_2[2]]

                        
                    
   
                                                
           
    
    print("Done generating ideals")
    
    print("Starting independence testing...")
    
    # the following carries out lines 23-27 in Algorithm 3.4

    D = {}
    for delta in ideals:
        D[delta] = rankcheck(p, ideals[delta])
        
    print("Done generating ideals")
    
    return(D)
    
    

# Solution_to_Ideals carries out lines 10-19 in Algorithm 3.4, and also carries out the ideas described in Theorem 2.4. 
    # it returns the ideal as described in line 19 as a list of coefficients [A,B,C] of a binary quadratic form. 
def Solution_to_Ideals(p, y, m):
    t = ZZ(y^2 - 4*m^p)
    if t < 0:
        delta = t.squarefree_part()
        if delta % 4 != 1:
            delta = 4*delta
        if delta.divides(t):
            z = ZZ(sqrt(t/delta))
            c = ZZ(gcd(m, z))
            if c.divides(delta) and not 4.divides(c):
                    
               #the following carries out the ideas described in Theorem 2.4    
            
                if 4.divides(delta):
                    e = 0
                else:
                    e = 1
                z_prime = Integer(z//(c^((p-1)/2)))
                y_prime = Integer(y//(c^((p-1)/2)))
                if z_prime % 2 == 1:
                    bezout = xgcd(4*m, z_prime)
                    z_star = bezout[2]
                    x = (z_star*y_prime) % (4*m)  

                else:
                    bezout = xgcd(m, z_prime)
                    z_star = bezout[2]

                    x = crt(z_star*y_prime, e , m, 4)

                t = (x-e)//2

                if t < m:
                    A = m
                    B = x
                    C = (B^2 - delta)//(4*A)
                else:
                    A = m
                    B = x - 2*m
                    C = (B^2 - delta)//(4*A)

           
                return([True, delta, [A, B, C]])
            
    return([False])


               

# rankcheck takes in a list of coefficients, corresponding to binary quadratic forms, and returns the integer k such that 
    # these forms generate a subgroup of order p^k in the class group. This function makes use of Sage's 
    # BinaryQF package
    
def rankcheck(n, forms_coeffs):
    rank = 0
    
    forms = []
    for coeff in forms_coeffs:
        
        # convert coefficients to binary quadratic forms using Sage's built in BinaryQF
        Qform = BinaryQF([coeff[0], coeff[1], coeff[2]]).reduced_form() 
        if Qform not in forms:
            forms.append(Qform)
    
    # full generated will contain the subgroup generated by the forms 
    full_generated = []

    counter = 0

    while counter < len(forms) - 1:


        if counter == 0:
            
            # the following adds powers of the first form to the subgroup
            f = forms[counter]
            f1 = f
            full_generated.append(f)
            counter = counter+1

            for power in range(1, n):
                f = (f*f1).reduced_form()
                full_generated.append(f)

        else:


            f = forms[counter] 
            if f in full_generated:
                counter += 1
                continue 

            # the following puts powers of the next forms into current_subgroup 
            current_subgroup = []
            f = forms[counter]
            counter = counter+1
            f1 = f
            current_subgroup.append(f)
            for power in range(1, n):
                f = (f*f1).reduced_form()
                current_subgroup.append(f)

            # the product of current_subgroup and full_generated is taken and replaces full_generated
            new_generated = set()
            for element in itertools.product(current_subgroup, full_generated):
                new  = (numpy.prod(element)).reduced_form()
                new_generated.add(new)
            full_generated = list(new_generated)

            
    # the p-rank of full_generated is computed
    while n^(rank) < len(full_generated) :
        rank += 1



    return(rank)
        
 
